/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ags_systemmanagement;

import java.awt.Image;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.text.DecimalFormat;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Prem Sharaan
 */
public class CentreManager_RegisterNewUser extends javax.swing.JFrame {
   private final String userDB = System.getProperty("user.dir") + "\\src\\db_TxtFiles\\User.txt";
    private String userID, profileImgDB, profileImgDir;
    private int newUserID;
    private final String prefixID = "USR";
    DecimalFormat deciFormat = new DecimalFormat("0000");
    /**
     * Creates new form RegisterNewCustomer
     */
    public CentreManager_RegisterNewUser() {
        initComponents();
        initGUI();
        
    }
    
  
    //Method for clearing any available user cachr
    private void clearCache(){
         deleteSession clearSession = new deleteSession();
         clearSession.clearUserSession();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblTitle = new javax.swing.JLabel();
        btnGoBack = new javax.swing.JButton();
        btnRegister = new javax.swing.JButton();
        lblProfilePic = new javax.swing.JLabel();
        btnUploadImg = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        lblUsername1 = new javax.swing.JLabel();
        chkUserRole = new javax.swing.JComboBox<>();
        txtNewUsername = new javax.swing.JTextField();
        lblUsername = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        txtRetypePassword = new javax.swing.JPasswordField();
        lblRetypePassword = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        chkGender = new javax.swing.JComboBox<>();
        lblGender = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        txtNumber = new javax.swing.JFormattedTextField();
        lblEmail = new javax.swing.JLabel();
        lblNumber = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(10, 25, 47));
        jPanel1.setPreferredSize(new java.awt.Dimension(1280, 720));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(230, 241, 255));
        jLabel1.setText("Register New User");

        lblTitle.setFont(new java.awt.Font("Leelawadee UI Semilight", 2, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(204, 204, 204));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("AGS Management System");

        btnGoBack.setBackground(new java.awt.Color(17, 34, 64));
        btnGoBack.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnGoBack.setForeground(new java.awt.Color(100, 255, 218));
        btnGoBack.setText("Go Back");
        btnGoBack.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnGoBack.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGoBack.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnGoBackMouseEntered(evt);
            }
        });
        btnGoBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGoBackActionPerformed(evt);
            }
        });

        btnRegister.setBackground(new java.awt.Color(204, 255, 204));
        btnRegister.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnRegister.setForeground(new java.awt.Color(0, 51, 51));
        btnRegister.setText("Register");
        btnRegister.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnRegister.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRegister.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnRegisterMouseEntered(evt);
            }
        });
        btnRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterActionPerformed(evt);
            }
        });

        lblProfilePic.setMaximumSize(new java.awt.Dimension(100, 100));
        lblProfilePic.setMinimumSize(new java.awt.Dimension(100, 100));

        btnUploadImg.setBackground(new java.awt.Color(0, 102, 102));
        btnUploadImg.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        btnUploadImg.setForeground(new java.awt.Color(237, 237, 237));
        btnUploadImg.setText("Upload Profile Image");
        btnUploadImg.setToolTipText("Button to reset every fields");
        btnUploadImg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnUploadImg.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUploadImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImgActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(204, 204, 255));
        btnClear.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        btnClear.setForeground(new java.awt.Color(0, 0, 51));
        btnClear.setText("Clear");
        btnClear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnClearMouseEntered(evt);
            }
        });
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        lblUsername1.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblUsername1.setForeground(new java.awt.Color(100, 255, 218));
        lblUsername1.setText("User Role :");

        chkUserRole.setBackground(new java.awt.Color(255, 255, 255));
        chkUserRole.setFont(new java.awt.Font("Segoe UI", 0, 15)); // NOI18N
        chkUserRole.setForeground(new java.awt.Color(0, 0, 0));
        chkUserRole.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "---none---", "Customer", "Centre Trainers", "Centre Managers" }));

        txtNewUsername.setBackground(new java.awt.Color(255, 255, 255));
        txtNewUsername.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtNewUsername.setForeground(new java.awt.Color(51, 51, 51));
        txtNewUsername.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 255, 204), 2));
        txtNewUsername.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNewUsernameActionPerformed(evt);
            }
        });

        lblUsername.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblUsername.setForeground(new java.awt.Color(100, 255, 218));
        lblUsername.setText("Username :");

        lblPassword.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblPassword.setForeground(new java.awt.Color(100, 255, 218));
        lblPassword.setText("Password :");

        txtPassword.setBackground(new java.awt.Color(255, 255, 255));
        txtPassword.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtPassword.setForeground(new java.awt.Color(51, 51, 51));
        txtPassword.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 204), 2));

        txtRetypePassword.setBackground(new java.awt.Color(255, 255, 255));
        txtRetypePassword.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtRetypePassword.setForeground(new java.awt.Color(51, 51, 51));
        txtRetypePassword.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 204), 2));

        lblRetypePassword.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblRetypePassword.setForeground(new java.awt.Color(100, 255, 218));
        lblRetypePassword.setText("Retype Password :");

        lblName.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblName.setForeground(new java.awt.Color(100, 255, 218));
        lblName.setText("Full Name : ");

        txtFullName.setBackground(new java.awt.Color(255, 255, 255));
        txtFullName.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtFullName.setForeground(new java.awt.Color(51, 51, 51));
        txtFullName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 204), 2));
        txtFullName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFullNameActionPerformed(evt);
            }
        });

        chkGender.setBackground(new java.awt.Color(255, 255, 255));
        chkGender.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        chkGender.setForeground(new java.awt.Color(0, 0, 0));
        chkGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "----", "Male", "Female" }));
        chkGender.setBorder(null);
        chkGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkGenderActionPerformed(evt);
            }
        });

        lblGender.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblGender.setForeground(new java.awt.Color(100, 255, 218));
        lblGender.setText("Gender :");

        txtEmail.setBackground(new java.awt.Color(255, 255, 255));
        txtEmail.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N
        txtEmail.setForeground(new java.awt.Color(51, 51, 51));
        txtEmail.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 204), 2));
        txtEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtEmailFocusLost(evt);
            }
        });
        txtEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtEmailActionPerformed(evt);
            }
        });

        txtNumber.setBackground(new java.awt.Color(255, 255, 255));
        txtNumber.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 255, 204), 2));
        txtNumber.setForeground(new java.awt.Color(0, 0, 0));
        try {
            txtNumber.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-#######")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        txtNumber.setToolTipText("");
        txtNumber.setFont(new java.awt.Font("Avenir Next", 0, 15)); // NOI18N

        lblEmail.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblEmail.setForeground(new java.awt.Color(100, 255, 218));
        lblEmail.setText("Email :");

        lblNumber.setFont(new java.awt.Font("Corsiva Hebrew", 0, 18)); // NOI18N
        lblNumber.setForeground(new java.awt.Color(100, 255, 218));
        lblNumber.setText("Phone Number :");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(169, 169, 169)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 692, Short.MAX_VALUE)
                        .addComponent(btnGoBack, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(266, 266, 266)
                                .addComponent(btnUploadImg, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(288, 288, 288)
                                .addComponent(lblProfilePic, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(132, 132, 132)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblPassword)
                            .addComponent(lblRetypePassword)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(lblNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                                    .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(chkGender, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtRetypePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(chkUserRole, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(lblUsername1)
                                .addComponent(lblUsername))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(677, 677, 677)
                        .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)
                        .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTitle)
                    .addComponent(btnGoBack, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(lblProfilePic, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnUploadImg, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 298, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnRegister, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(198, 198, 198))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUsername1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkUserRole, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNewUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblRetypePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRetypePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkGender, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblGender, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 6, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 1328, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 900, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGoBackMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGoBackMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnGoBackMouseEntered

    private void btnGoBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGoBackActionPerformed
        int selection = JOptionPane.showConfirmDialog(null, "Going back to main menu will cancel the ongoing user registration. Continue?", "Returning to Main Menu!", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (selection == JOptionPane.YES_OPTION) {
            this.dispose();
            openFrame openFrame = new openFrame();
            openFrame.openManagerMainMenu();
        }
    }//GEN-LAST:event_btnGoBackActionPerformed

    private void btnRegisterMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRegisterMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRegisterMouseEntered

    private void btnRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterActionPerformed
        registerUser((String)chkUserRole.getSelectedItem(), txtNewUsername.getText(), txtPassword.getText(), txtRetypePassword.getText(), txtFullName.getText(), (String) chkGender.getSelectedItem(), txtNumber.getText(), txtEmail.getText());

    }//GEN-LAST:event_btnRegisterActionPerformed

    private void btnUploadImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImgActionPerformed
      getProfileImage();
    }//GEN-LAST:event_btnUploadImgActionPerformed

    private void btnClearMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnClearMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_btnClearMouseEntered

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
         clearTxtFields();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtNewUsernameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNewUsernameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNewUsernameActionPerformed

    private void txtFullNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFullNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFullNameActionPerformed

    private void chkGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkGenderActionPerformed

    private void txtEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmailFocusLost
        UserEmailValidation invalidate = new UserEmailValidation();
        invalidate.runValidate(txtEmail, true);
    }//GEN-LAST:event_txtEmailFocusLost

    private void txtEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtEmailActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CentreManager_RegisterNewUser().setVisible(true);
            }
        });
    }

          
    // This method clears the text fields
    private void clearTxtFields(){
        try {
            chkUserRole.setSelectedIndex(0);
            txtNewUsername.setText("");
            txtPassword.setText("");
            txtRetypePassword.setText("");
            txtFullName.setText("");
            chkGender.setSelectedIndex(0);
            txtEmail.setText("");
            txtNumber.setText("");
            userID = "";
            
            profileImgDB =  System.getProperty("user.dir") + "\\src\\ProfileImgSrc\\";
            File defaultImg = new File(profileImgDB + "defaultProFile.jpg");
            BufferedImage buffImg = ImageIO.read(defaultImg);
            Image imgScale = buffImg.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
            ImageIcon scaledImg = new ImageIcon(imgScale);
            lblProfilePic.setIcon(scaledImg);
        } catch (IOException ex) {
            Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(Level.SEVERE, null, ex);
        }
      
    }
    
   
        // This is a new exception class
    public void emptyInputFields() throws Exception {
        UserEmailValidation invalidate = new UserEmailValidation();
        if ("".equals(txtNewUsername.getText())) {
            throw new Exception("Empty user username");
        }
        if ("".equals(String.valueOf(txtPassword.getPassword()))) {
            throw new Exception("Empty user password");
        }
        if ("".equals(String.valueOf(txtRetypePassword.getPassword()))) {
            throw new Exception("Empty user retype password");
        }
        if ("".equals(txtFullName.getText())) {
            throw new Exception("Empty user full name");
        }
        if ("".equals(txtNumber.getText())) {
            throw new Exception("Empty user phone number");
        }
        if ("".equals(txtEmail.getText())) {
            throw new Exception("Empty user email");
        }

        if (invalidate.runValidate(txtEmail, false)) {
            throw new Exception("Invalid user email address format");
        }
    }
    
    
     //This method raise message for empty fields, password comparison and username validation.
    private void validateInput() {
        if (chkUserRole.getSelectedIndex()== 0 && "".equals(txtNewUsername.getText()) && "".equals(txtFullName.getText()) && "".equals(txtNumber.getText()) && "".equals(txtEmail.getText()) && chkGender.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input all the fields to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if (chkUserRole.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "User Role is not selected!", "User Role unselected!", JOptionPane.WARNING_MESSAGE);     
        } else if ("".equals(txtNewUsername.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input username to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(String.valueOf(txtPassword.getPassword()))) {
            JOptionPane.showMessageDialog(null, "Invalid input! Pleass input password to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(String.valueOf(txtRetypePassword.getPassword()))) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input retype password to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtFullName.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input full name to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if (chkGender.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(null, "Gender is not selected!", "Gender unselected!", JOptionPane.WARNING_MESSAGE);
        } else if ("".equals(txtEmail.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input email to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if ("   -       ".equals(txtNumber.getText())) {
            JOptionPane.showMessageDialog(null, "Invalid input! Please input phone number to proceed.", "Invalid insertion detected!", JOptionPane.WARNING_MESSAGE);
        } else if (!comparePassword()) {
            JOptionPane.showMessageDialog(null, "Password is not same!", "Password mismatch!", JOptionPane.WARNING_MESSAGE);
        } else if(usernameValidation(txtNewUsername.getText())) {
            JOptionPane.showMessageDialog(null, "Username is already taken by another user! Use a different Username to proceed.", "Username is in use!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
 
    
     // This method handles all validation related to the fields
    private void staffInputCharacterValidator() {
        txtNewUsername.getDocument().addDocumentListener(new userDocumentListener() {
            UserUsernameValidation invalidate = new UserUsernameValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
                invalidate.setRegex("testing");
                invalidate.getRegex();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtNewUsername);
            }

        });
        
        txtPassword.getDocument().addDocumentListener(new userDocumentListener() {
            UserPasswordValidation invalidate = new UserPasswordValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtPassword);
            }
        });
        
        txtRetypePassword.getDocument().addDocumentListener(new userDocumentListener() {
            UserPasswordValidation invalidate = new UserPasswordValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtRetypePassword);
            }
        });
        
          txtFullName.getDocument().addDocumentListener(new userDocumentListener() {
            UserFullNameValidation invalidate = new UserFullNameValidation();

            @Override
            public void changedUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                invalidate.runValidate(txtFullName);
            }
        }); 
       
    }

    
    
     //This method is to increment the userID
    private void userIDIncrementor() {
        boolean hasUserIDRecord = false;
        // This array is to store all lines
        String[] userDetails = null;
        try {
            File userFile = new File(userDB);
            if (!userFile.exists()) {
                userFile.createNewFile();
            }
            Scanner readFile;
            try {
                // Read lines from the file until no more are left.
                readFile = new Scanner(userFile);
                while (readFile.hasNext()) {
                    // Read the next line.
                    String nextUser = readFile.nextLine();

                    // Split the line by using the colon ":" and store into  an array.
                    userDetails = nextUser.split(":");
                    userDetails[0] = userDetails[0].replace("USR", "");
                    hasUserIDRecord = true;
                }
                readFile.close();
                if (!hasUserIDRecord) {
                    JOptionPane.showMessageDialog(null, "The system does not find any user details inside the text file", "User Record is empty!", JOptionPane.ERROR_MESSAGE);
                    newUserID = 1;
                } else {
                    newUserID = Integer.parseInt(userDetails[0]) + 1;
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex);
            JOptionPane.showMessageDialog(null, "Invalid input User ID", "Invalid input type!", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    
 
    //This method is to check whether the username is available or not
    public boolean usernameValidation(String userUsername) {
        boolean notFound = false;
        // This array is to store all lines
        String[] userDetails;
        try {
            // This sets the file which going to be accessed
            File userFile = new File(userDB);
            if (!userFile.exists()) {
                userFile.createNewFile();
            }
            Scanner searchUsername = new Scanner(userFile);
            // Read till last line of file
            while (searchUsername.hasNext()) {
                // Read the next line.
                String inputUsername = searchUsername.nextLine();
                // Split the details by using the colon and store in an array.
                userDetails = inputUsername.split(":");
                if (userUsername.equals(userDetails[3])) {
                    notFound = true;
                }
            }
            searchUsername.close();
        } catch (Exception ex) {

        }
        return notFound;
    }
    
    
      // This method handles password comparison 
    private boolean comparePassword() {
        boolean isSimilar = false;
        String firstPass = String.valueOf(txtPassword.getPassword());
        String secondPass = String.valueOf(txtRetypePassword.getPassword());
        if ("".equals(firstPass) || "".equals(secondPass)) {
            isSimilar = false;
        } else if (firstPass.equals(secondPass)) {
            isSimilar = true;
        }
        return isSimilar;
    }
    
     private void loadDefaultImage() throws IOException {
         // This sets the directory of the project
                profileImgDB = System.getProperty("user.dir") + "\\src\\ProfileImgSrc\\";
                File proImgSrc = new File(profileImgDB + "defaultProFile.jpg");
                BufferedImage bufImg = ImageIO.read(proImgSrc);
                Image imgScale = bufImg.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(imgScale);
                lblProfilePic.setIcon(scaledIcon);
      }

    
      private void getProfileImage() {
        try {
            JFileChooser fileChooser = new JFileChooser();
            //improve this later to allow more extensions
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Only jpg allowed", "jpg");
            fileChooser.setFileFilter(filter);
            int selected = fileChooser.showOpenDialog(null);
            //this open dialog to pick the imaege
            if (selected == JFileChooser.APPROVE_OPTION) { 
                File file = fileChooser.getSelectedFile(); 
                //storing the directory of the image into a variable
                String getImageDir = file.getAbsolutePath();
                BufferedImage bufImg = ImageIO.read(new File(getImageDir));
                Image imgScale = bufImg.getScaledInstance(100, 100, Image.SCALE_SMOOTH);
                ImageIcon imgIcon = new ImageIcon(imgScale);
                lblProfilePic.setIcon(imgIcon);
                profileImgDir = getImageDir; 
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "There were an error occured getting the image!!");
        }

    }
      
      
     private void saveProfileImg() {
       profileImgDB = System.getProperty("user.dir") + "\\src\\ProfileImgSrc\\";
        
         if (profileImgDir == null) {
            profileImgDir = profileImgDB + "defaultProFile.jpg";
         }

            String newImgName =  profileImgDB+userID + "." + "jpg";
            File path = new File(profileImgDir); 
            File newImg = new File(newImgName);  
            File originalImgPath = new File(profileImgDB);

        try {
            Files.copy(path.toPath(), newImg.toPath(), StandardCopyOption.REPLACE_EXISTING); 
            boolean success = originalImgPath.renameTo(newImg);

            if (!success) {
                
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        
        
        
    }  
     
     
     // This method handles the staff registration
    private void registerUser(String userUserRole, String userUsername, String userPassword, String userRetypePassword, String userFullName, String userGender, String userNumber, String userEmail) {
        usernameValidation(txtNewUsername.getText());
        try {
            //This throws the exception
            emptyInputFields();
            // To check username availability
            if (usernameValidation(txtNewUsername.getText())) {
                throw new Exception("Username is already in use by another user.");
            }
            // This compare the password and retype password
            if (!comparePassword()) {
                throw new Exception("Password and retype password entered not same!");
            }
           
            // This is will be displayed when the combo box is selected default
             if (chkUserRole.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "User Role not selected!", "User Role unselected!", JOptionPane.ERROR_MESSAGE);
            }
            
            if (chkGender.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Gender not selected!", "Gender unselected!", JOptionPane.ERROR_MESSAGE);
            }
            
            try {
                userID = prefixID + deciFormat.format(newUserID);
                FileWriter fw = new FileWriter(userDB, true);
                BufferedWriter bw  = new BufferedWriter(fw);
                bw.write(userID + ":" + userUserRole +":"+ userFullName + ":" + userUsername+ ":"+ userPassword +  ":" + userGender + ":" + userNumber + ":" + userEmail + ":" +"true"+"\n");
                JOptionPane.showMessageDialog(null, userFullName + " has been successfully registered!", "User account successfully created!", JOptionPane.INFORMATION_MESSAGE);
                bw.close();
                saveProfileImg();
                userIDIncrementor();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            validateInput();

        }
    } 
     
    
  
     //This method is for initial start of the frame
    public void initGUI() {
     
        //This will padding for the textfields
        txtNewUsername.setBorder(BorderFactory.createCompoundBorder(txtNewUsername.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtPassword.setBorder(BorderFactory.createCompoundBorder(txtPassword.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtFullName.setBorder(BorderFactory.createCompoundBorder(txtFullName.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtRetypePassword.setBorder(BorderFactory.createCompoundBorder(txtRetypePassword.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtEmail.setBorder(BorderFactory.createCompoundBorder(txtEmail.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));
        txtNumber.setBorder(BorderFactory.createCompoundBorder(txtNumber.getBorder(), BorderFactory.createEmptyBorder(5, 5, 5, 4)));

        //Disable autofucous in buttons
        btnGoBack.setFocusable(false);
        btnRegister.setFocusable(false);
        btnClear.setFocusable(false);
        btnUploadImg.setFocusable(false);

        //This sets the increment staff id for the new staff
        userIDIncrementor();

        try {
            //Load default profile image for user
            loadDefaultImage();
        } catch (IOException ex) {
            Logger.getLogger(CentreManager_RegisterNewUser.class.getName()).log(Level.SEVERE, null, ex);
        }

        // This class handles window closing event
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                int selection = JOptionPane.showConfirmDialog(null, "Want to exit?", "Closing User Register", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (selection == JOptionPane.YES_OPTION) {
                   //This will clear the login session
                    clearCache();
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                    dispose();
                } else {
                    setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
                }
            }
        });

        staffInputCharacterValidator();
    }

    
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnGoBack;
    private javax.swing.JButton btnRegister;
    private javax.swing.JButton btnUploadImg;
    private javax.swing.JComboBox<String> chkGender;
    private javax.swing.JComboBox<String> chkUserRole;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblProfilePic;
    private javax.swing.JLabel lblRetypePassword;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblUsername;
    private javax.swing.JLabel lblUsername1;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtNewUsername;
    private javax.swing.JFormattedTextField txtNumber;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JPasswordField txtRetypePassword;
    // End of variables declaration//GEN-END:variables
}
